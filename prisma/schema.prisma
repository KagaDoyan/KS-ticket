generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum item_status {
  in_stock
  return
  spare
  repair
  replace
}

enum item_type {
  inside
  outside
}

enum ticket_status {
  open
  pending
  spare
  close
}

enum action_status {
  repair
  clean
  spare
  replace
}

model users {
  id          Int         @id @default(autoincrement())
  deleted_at  DateTime?
  created_at  DateTime    @default(now())
  email       String      @unique
  fullname    String
  password    String
  first_login Boolean     @default(false)
  role        String      @default("User")
  engineers   engineers[]
  tickets     tickets[]
}

model customers {
  id              Int               @id @default(autoincrement())
  fullname        String
  shortname       String
  deleted_at      DateTime?
  created_at      DateTime          @default(now())
  created_by      Int
  shops           shops[]
  tickets         tickets[]
  priority_groups priority_groups[]
  items           items[]
}

model shops {
  id           Int       @id @default(autoincrement())
  deleted_at   DateTime?
  created_at   DateTime  @default(now())
  created_by   Int
  shop_number  String
  shop_name    String
  phone        String
  email        String
  latitude     String
  longitude    String
  province     provinces @relation(fields: [province_id], references: [id])
  province_id  Int
  customer     customers @relation(fields: [customers_id], references: [id])
  customers_id Int
  tickets      tickets[]
}

model provinces {
  id                      Int                       @id @default(autoincrement())
  name                    String
  code                    String
  shops                   shops[]
  engineers               engineers[]
  node                    nodes[]
  deleted_at              DateTime?
  created_at              DateTime                  @default(now())
  created_by              Int
  engineer_on_province    engineer_on_province[]
  node_on_province        node_on_province[]
  priority_groups         priority_groups[]         @relation("PriorityGroupProvince") // Add this line
  priority_group_province priority_group_province[]
}

model engineer_on_province {
  provinces   provinces @relation(fields: [province_id], references: [id])
  province_id Int // relation scalar field (used in the `@relation` attribute above)
  engineer    engineers @relation(fields: [engineer_id], references: [id])
  engineer_id Int // relation scalar field (used in the `@relation` attribute above)

  @@id([province_id, engineer_id])
}

model nodes {
  id               Int                @id @default(autoincrement())
  name             String
  deleted_at       DateTime?
  created_at       DateTime           @default(now())
  created_by       Int
  province         provinces[]
  engineers        engineers[]
  node_on_province node_on_province[]
}

model node_on_province {
  provinces   provinces @relation(fields: [province_id], references: [id])
  province_id Int // relation scalar field (used in the `@relation` attribute above)
  node        nodes     @relation(fields: [node_id], references: [id])
  node_id     Int // relation scalar field (used in the `@relation` attribute above)

  @@id([province_id, node_id])
}

model brands {
  id         Int       @id @default(autoincrement())
  name       String
  items      items[]
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model categories {
  id         Int       @id @default(autoincrement())
  name       String
  items      items[]
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model models {
  id         Int       @id @default(autoincrement())
  name       String
  items      items[]
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model items {
  id                   Int         @id @default(autoincrement())
  serial_number        String
  customer_id          Int?
  customer             customers?  @relation(fields: [customer_id], references: [id])
  category_id          Int
  brand_id             Int
  model_id             Int
  warranty_expiry_date DateTime?
  inc_number           String?
  status               item_status
  category             categories  @relation(fields: [category_id], references: [id])
  brand                brands      @relation(fields: [brand_id], references: [id])
  model                models      @relation(fields: [model_id], references: [id])
  type                 item_type?
  deleted_at           DateTime?
  created_at           DateTime    @default(now())
  created_by           Int
  engineer             engineers?  @relation(fields: [engineers_id], references: [id])
  engineers_id         Int?
  ticket_id            Int?
  ticket               tickets?    @relation(fields: [ticket_id], references: [id])
  storage              storages?    @relation(fields: [storage_id], references: [id])
  storage_id           Int?
}

model priority_groups {
  id                      Int                       @id @default(autoincrement())
  group_name              String
  customer                customers                 @relation(fields: [customers_id], references: [id])
  deleted_at              DateTime?
  created_at              DateTime                  @default(now())
  created_by              Int
  priorities              priorities[]
  customers_id            Int
  provinces               provinces[]               @relation("PriorityGroupProvince") // Add this line
  priority_group_province priority_group_province[]
}

model priority_group_province {
  priority_group    priority_groups @relation(fields: [priority_group_id], references: [id])
  priority_group_id Int
  province          provinces       @relation(fields: [province_id], references: [id])
  province_id       Int

  @@id([priority_group_id, province_id]) // Composite primary key
}

model priorities {
  id                 Int             @id @default(autoincrement())
  priority_group     priority_groups @relation(fields: [priority_groups_id], references: [id])
  name               String
  time_sec           String
  deleted_at         DateTime?
  created_at         DateTime        @default(now())
  created_by         Int
  priority_groups_id Int
}

model engineers {
  id                   Int                    @id @default(autoincrement())
  name                 String
  lastname             String
  phone                String
  line_name            String
  latitude             String
  longitude            String
  node_id              Int?
  password             String
  province             provinces[]
  deleted_at           DateTime?
  created_at           DateTime               @default(now())
  created_by           Int
  users                users                  @relation(fields: [created_by], references: [id])
  engineer_on_province engineer_on_province[]
  tickets              tickets[]
  items                items[]
  node                 nodes?                 @relation(fields: [node_id], references: [id])
}

model tickets {
  id                 Int             @id @default(autoincrement())
  inc_number         String
  ticket_number      String
  customer_id        Int
  customer           customers       @relation(fields: [customer_id], references: [id])
  shop_id            Int
  shop               shops           @relation(fields: [shop_id], references: [id])
  open_date          String
  open_time          String
  close_date         String?
  close_time         String?
  title              String
  description        String          @db.LongText
  due_by             String
  priority_id        Int?
  sla_priority_level String
  contact_name       String
  contact_tel        String
  assigned_to        String
  created_by         Int
  created_user       users           @relation(fields: [created_by], references: [id])
  updated_by         Int
  ticket_status      ticket_status
  appointment_date   String
  appointment_time   String
  engineer_id        Int
  engineer           engineers       @relation(fields: [engineer_id], references: [id])
  solution           String?         @db.LongText
  investigation      String?         @db.LongText
  close_description  String?         @db.LongText
  item_brand         String?
  item_category      String?
  item_model         String?
  item_sn            String?
  warranty_exp       DateTime?
  resolve_status     Boolean?
  resolve_remark     String?
  action             String?
  time_in            String?
  time_out           String?
  deleted_at         DateTime?
  created_at         DateTime        @default(now())
  store_item         store_items[]
  spare_item         spare_items[]
  return_item        return_items[]
  ticket_image       ticket_images[]
  item               items[]
}

model store_items {
  id            Int         @id @default(autoincrement())
  ticket_id     Int
  ticket        tickets     @relation(fields: [ticket_id], references: [id])
  brand         String
  category      String
  model         String
  serial_number String
  warranty_exp  DateTime?
  status        item_status
  deleted_at    DateTime?
  created_at    DateTime    @default(now())
  created_by    Int
  deleted_by    Int?
}

model spare_items {
  id            Int         @id @default(autoincrement())
  ticket_id     Int
  ticket        tickets     @relation(fields: [ticket_id], references: [id])
  brand         String
  category      String
  model         String
  serial_number String
  warranty_exp  DateTime?
  status        item_status
  deleted_at    DateTime?
  created_at    DateTime    @default(now())
  created_by    Int
  deleted_by    Int?
}

model return_items {
  id            Int         @id @default(autoincrement())
  ticket_id     Int
  ticket        tickets     @relation(fields: [ticket_id], references: [id])
  brand         String
  category      String
  model         String
  serial_number String
  warranty_exp  DateTime?
  status        item_status
  deleted_at    DateTime?
  created_at    DateTime    @default(now())
  created_by    Int
}

model ticket_images {
  id         Int       @id @default(autoincrement())
  ticket_id  Int
  ticket     tickets   @relation(fields: [ticket_id], references: [id])
  name       String
  path       String
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model storages {
  id         Int       @id @default(autoincrement())
  name       String
  location   String
  latitude   String?
  longitude  String?
  craeted_by Int
  deleted_at DateTime?
  items      items[]
}
