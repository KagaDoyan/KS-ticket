generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum item_status {
  in_stock
  return
  spare
  repair
}

enum ticket_status {
  open
  pending
  spare
  close
}

enum action_status {
  repair
  clean
  spare
  replace
}

model users {
  id          Int         @id @default(autoincrement())
  deleted_at  DateTime?
  created_at  DateTime    @default(now())
  email       String      @unique
  fullname    String
  password    String
  first_login Boolean     @default(false)
  role        String      @default("User")
  customers   customers[]
  engineers   engineers[]
}

model customers {
  id         Int       @id @default(autoincrement())
  fullname   String
  shortname  String
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
  users      users     @relation(fields: [created_by], references: [id])
  shops      shops[]
}

model shops {
  id           Int       @id @default(autoincrement())
  deleted_at   DateTime?
  created_at   DateTime  @default(now())
  created_by   Int
  shop_number  String
  shop_name    String
  phone        String
  email        String
  latitude     String
  longitude    String
  province     provinces @relation(fields: [province_id], references: [id])
  province_id  Int
  customer     customers @relation(fields: [customers_id], references: [id])
  customers_id Int
}

model provinces {
  id                   Int                    @id @default(autoincrement())
  name                 String
  code                 String
  priority_group_id    Int
  priority_group       priority_groups        @relation(fields: [priority_group_id], references: [id])
  shops                shops[]
  engineers            engineers[]
  deleted_at           DateTime?
  created_at           DateTime               @default(now())
  created_by           Int
  engineer_on_province engineer_on_province[]
}

model engineer_on_province {
  provinces   provinces @relation(fields: [province_id], references: [id])
  province_id Int // relation scalar field (used in the `@relation` attribute above)
  engineer    engineers @relation(fields: [engineer_id], references: [id])
  engineer_id Int // relation scalar field (used in the `@relation` attribute above)
  @@id([province_id, engineer_id])
}

model brands {
  id         Int       @id @default(autoincrement())
  name       String
  items      items[]
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model categories {
  id         Int       @id @default(autoincrement())
  name       String
  items      items[]
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model models {
  id         Int       @id @default(autoincrement())
  name       String
  items      items[]
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model items {
  id                   Int         @id @default(autoincrement())
  serial_number        String
  category_id          Int
  brand_id             Int
  model_id             Int
  warranty_expiry_date DateTime?
  inc_number           String
  status               item_status
  category             categories  @relation(fields: [category_id], references: [id])
  brand                brands      @relation(fields: [brand_id], references: [id])
  model                models      @relation(fields: [model_id], references: [id])
  deleted_at           DateTime?
  created_at           DateTime    @default(now())
  created_by           Int
}

model priority_groups {
  id         Int         @id @default(autoincrement())
  group_name String
  provinces  provinces[]
  deleted_at DateTime?
  created_at DateTime    @default(now())
  created_by Int
}

model priorities {
  id         Int       @id @default(autoincrement())
  name       String
  time_sec   String
  deleted_at DateTime?
  created_at DateTime  @default(now())
  created_by Int
}

model engineers {
  id                   Int                    @id @default(autoincrement())
  name                 String
  lastname             String
  phone                String
  line_name            String
  latitude             String
  longitude            String
  node                 String
  password             String
  province             provinces[]
  deleted_at           DateTime?
  created_at           DateTime               @default(now())
  created_by           Int
  users                users                  @relation(fields: [created_by], references: [id])
  engineer_on_province engineer_on_province[]
}

model tickets {
  id                 Int           @id @default(autoincrement())
  inc_number         String
  ticket_number      String
  customer_id        Int
  store_id           Int
  open_date          DateTime      @db.Date
  open_time          DateTime      @db.Time()
  close_date         DateTime      @db.Date
  close_time         DateTime      @db.Time()
  title              String
  description        String        @db.LongText
  due_by             String
  sla_priority_level String
  contact_name       String
  contact_tel        String
  assigned_to        String
  created_by         String
  updated_by         String
  ticket_status      ticket_status
  appointment_date   DateTime      @db.Date
  appointment_time   DateTime      @db.Time()
  engineer_id        Int
  solution           String
  investigation      String
  item_brand         String
  item_category      String
  item_model         String
  item_sn            String
  warranty_exp       DateTime
  resolve_status     String
  resolve_remark     String
  action             action_status
  time_in            DateTime
  time_out           DateTime
  deleted_at         DateTime?
  created_at         DateTime      @default(now())
}
